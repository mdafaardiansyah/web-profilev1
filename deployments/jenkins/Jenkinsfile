pipeline {
    agent any

    tools {
        nodejs 'NodeJS 18'
    }

    parameters {
        string(name: 'RELEASE_TAG', defaultValue: '', description: 'Release tag to build and deploy (kosongkan untuk menggunakan build number)')
        choice(name: 'DEPLOY_ENV', choices: ['development', 'production'], description: 'Environment to deploy')
    }

    environment {
        // Docker Hub Credentials
        DOCKER_HUB_CREDS = credentials('docker-hub')
        DOCKER_HUB_PAT = credentials('docker-hub-pat')
        
        // SonarQube Credentials
        SONARQUBE_TOKEN = credentials('sonarqube-token')
        SONARQUBE_URL = credentials('sonarqube-url')
        
        // Notification
        DISCORD_WEBHOOK = credentials('discord-notification')
        
        // Deployment
        IP_SERVER = credentials('ip-server-kvm2')
        
        // Application
        APP_NAME = 'portfolio'
        DOCKER_IMAGE = "ardidafa/${APP_NAME}"
        IMAGE_TAG = "${params.RELEASE_TAG ? params.RELEASE_TAG : env.BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    // Get git information
                    env.GIT_BRANCH = sh(script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim()
                    env.GIT_COMMIT = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
                    env.GIT_COMMIT_SHORT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    env.GIT_AUTHOR = sh(script: 'git log -1 --pretty=format:"%an"', returnStdout: true).trim()
                    env.GIT_MESSAGE = sh(script: 'git log -1 --pretty=format:"%s"', returnStdout: true).trim()
                    
                    discordSend(
                        webhookURL: DISCORD_WEBHOOK,
                        title: "🚀 Build Started!",
                        description: """**Branch:** `${env.GIT_BRANCH}`
**Build:** `#${env.BUILD_NUMBER}`
**Status:** `🔄 In Progress`
**Commit:** `${env.GIT_COMMIT_SHORT}`
**Author:** `${env.GIT_AUTHOR}`
**Message:** `${env.GIT_MESSAGE}`

**🔗 Links:**
• [View Build](${env.BUILD_URL})
• [Console Output](${env.BUILD_URL}console)
• [Pipeline](${env.BUILD_URL}pipeline-graph/)""",
                        link: env.BUILD_URL,
                        result: 'STARTED'
                    )
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh 'npm ci'
            }
        }
        
        stage('Code Quality Analysis') {
            steps {
                script {
                    def scannerHome = tool 'SonarQube-Scanner'
                    withSonarQubeEnv('SonarQube-Server') {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=portfolio-website \
                            -Dsonar.projectName="Portfolio Website" \
                            -Dsonar.projectVersion=1.0 \
                            -Dsonar.sources=src \
                            -Dsonar.exclusions=**/node_modules/**,**/build/**,**/*.test.js,**/*.spec.js,**/coverage/**,**/public/** \
                            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
                            -Dsonar.host.url=${SONARQUBE_URL} \
                            -Dsonar.login=${SONARQUBE_TOKEN}
                        """
                    }
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage('Security Scan - Dependencies') {
            steps {
                sh 'npm audit --production || true'
            }
        }
        
        stage('Build') {
            steps {
                script {
                    // Limit CPU cores untuk build
                    withEnv([
                        'NODE_OPTIONS=--max-old-space-size=2048', // Kurangi dari 4GB ke 2GB
                        'GENERATE_SOURCEMAP=false',
                        'INLINE_RUNTIME_CHUNK=false',
                        'CI=false', // Enable CI optimizations
                        'BUILD_PATH=./build'
                    ]) {
                        // Build dengan nice priority (lower CPU priority)
                        sh 'nice -n 10 npm run build'
                    }
                }
            }
        }
        
        stage('Docker Build') {
            steps {
                // Perhatikan path Dockerfile yang sudah diubah
                sh "docker build -t ${DOCKER_IMAGE}:${IMAGE_TAG} -t ${DOCKER_IMAGE}:latest -f deployments/docker/Dockerfile ."
            }
        }
        
        stage('Security Scan - Container') {
            steps {
                script {
                    // Isolate variables to avoid Groovy String interpolation issues
                    def dockerImg = DOCKER_IMAGE
                    def imgTag = IMAGE_TAG

                    // Run Trivy scan and capture the output directly
                    // This approach is simpler and avoids file I/O issues.
                    def trivyOutput = sh(script: """docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --severity HIGH,CRITICAL '${dockerImg}:${imgTag}'""", returnStdout: true).trim()
                    echo "Trivy Scan Output:"
                    echo "${trivyOutput}"

                    // Check for vulnerabilities in the output
                    if (trivyOutput.contains("Total: 0")) {
                        echo "✅ No HIGH or CRITICAL vulnerabilities found."
                    } else {
                        echo "⚠️ Vulnerabilities found! See details above."
                        if (deployEnv == 'production') {
                            error "Critical vulnerabilities found in production deployment! Check scan output for details."
                        } else {
                            echo "Continuing for development deployment. Review scan output for security improvements."
                        }
                    }
                        """,

                }
            }
            post {
                always {
                    echo "Security scan completed. Trivy report archived as build artifact."
                }
            }
        }
        
        stage('Docker Push') {
            steps {
                sh "echo ${DOCKER_HUB_PAT} | docker login -u ardidafa --password-stdin"
                sh "docker push ${DOCKER_IMAGE}:${IMAGE_TAG}"
                sh "docker push ${DOCKER_IMAGE}:latest"
            }
            post {
                always {
                    // Clean up Docker images with proper error handling
                    sh '''
                        # List running containers using the image
                        echo "Checking for running containers using our images..."
                        RUNNING_CONTAINERS=$(docker ps -q --filter ancestor=${DOCKER_IMAGE}:${IMAGE_TAG} 2>/dev/null || echo "")
                        
                        if [ -n "$RUNNING_CONTAINERS" ]; then
                            echo "Warning: Found running containers using the image. Will not force remove."
                            docker ps --filter ancestor=${DOCKER_IMAGE}:${IMAGE_TAG}
                        else
                            echo "No running containers found for this image. Safe to remove."
                            # Remove the specific tag with force if needed
                            docker rmi ${DOCKER_IMAGE}:${IMAGE_TAG} -f || echo "Warning: Could not remove ${DOCKER_IMAGE}:${IMAGE_TAG}"
                        fi
                        
                        # Clean up dangling images and build cache
                        echo "Cleaning up dangling images and build cache..."
                        docker image prune -f
                        docker builder prune -f
                    '''
                }
            }
        }
        
        stage('Deploy') {
            steps {
                withCredentials([
                    sshUserPrivateKey(credentialsId: 'deploy-server', keyFileVariable: 'SSH_KEY'),
                    string(credentialsId: 'ip-server-kvm2', variable: 'SERVER_IP'),
                    string(credentialsId: 'user-ip-kvm2', variable: 'SERVER_USER')
                ]) {
                    script {
                        // Isolate variables to avoid Groovy String interpolation issues
                        def dockerImg = DOCKER_IMAGE
                        def imgTag = IMAGE_TAG
                        
                        withEnv([
                            "DOCKER_IMG=${dockerImg}",
                            "IMG_TAG=${imgTag}"
                        ]) {
                            sh '''
                                # Set correct SSH key permissions
                                chmod 600 "$SSH_KEY"
                                
                                # Create directory on server
                                ssh -o StrictHostKeyChecking=no -i "$SSH_KEY" "$SERVER_USER"@"$SERVER_IP" "mkdir -p /var/www/portfolio"
                                
                                # Clone or update repository
                                ssh -o StrictHostKeyChecking=no -i "$SSH_KEY" "$SERVER_USER"@"$SERVER_IP" "if [ -d /var/www/portfolio/.git ]; then \
                                  cd /var/www/portfolio && git pull; \
                                else \
                                  git clone https://github.com/mdafaardiansyah/web-profilev1.git /var/www/portfolio; \
                                fi"
                                
                                # Copy configuration files
                                scp -o StrictHostKeyChecking=no -i "$SSH_KEY" deployments/nginx/site.conf "$SERVER_USER"@"$SERVER_IP":/var/www/portfolio/nginx-site.conf
                                
                                # Deploy application with correct nginx configuration
                                ssh -o StrictHostKeyChecking=no -i "$SSH_KEY" "$SERVER_USER"@"$SERVER_IP" "cd /var/www/portfolio && \
                                docker compose down && \
                                docker pull $DOCKER_IMG:$IMG_TAG && \
                                docker tag $DOCKER_IMG:$IMG_TAG $DOCKER_IMG:latest && \
                                docker compose up -d && \

                                # nginx reverse proxy conf
                                sudo cp nginx-site.conf /etc/nginx/sites-available/glanze.space.conf && \
                                sudo ln -sf /etc/nginx/sites-available/glanze.space.conf /etc/nginx/sites-enabled/ && \
                                sudo nginx -t && \
                                sudo systemctl reload nginx"
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Smoke Test') {
            steps {
                // Wait for service to be ready
                sh 'sleep 30'

                // Basic health check
                sh 'curl -k -f -s --retry 10 --retry-connrefused --retry-delay 5 https://glanze.space || true'
            }
        }
    }
    
    post {
        success {
            script {
                // Get artifacts info
                def artifactsInfo = "No artifacts saved."
                try {
                    def artifacts = currentBuild.rawBuild.getArtifacts()
                    if (artifacts && artifacts.size() > 0) {
                        artifactsInfo = artifacts.collect { "• ${it.getDisplayPath()}" }.join("\n")
                    }
                } catch (Exception e) {
                    artifactsInfo = "No artifacts saved."
                }
                
                discordSend(
                    webhookURL: DISCORD_WEBHOOK,
                    title: "✅ Deploy Success!",
                    description: """**Branch:** `${env.GIT_BRANCH ?: 'origin/main'}`
**Build:** `${env.BUILD_NUMBER}`
**Status:** `✅ Success`
**Environment:** `${params.DEPLOY_ENV}`
**Image Tag:** `${IMAGE_TAG}`

**📝 Changes:**
`${env.GIT_COMMIT_SHORT}` ${env.GIT_MESSAGE} - ${env.GIT_AUTHOR}

**📦 Artifacts:**
${artifactsInfo}

**🔗 Links:**
• [View Build](${env.BUILD_URL})
• [Console Output](${env.BUILD_URL}console)
• [Test Results](${env.BUILD_URL}testReport/)
• [Artifacts](${env.BUILD_URL}artifact/)
• [🌐 Live Site](https://glanze.space)

**🐳 Docker Image:**
`${DOCKER_IMAGE}:${IMAGE_TAG}`

**⏱️ Duration:** `${currentBuild.durationString}`""",
                    link: env.BUILD_URL,
                    result: 'SUCCESS'
                )
            }
        }
        failure {
            script {
                // Get failure stage info
                def failureStage = "Unknown"
                try {
                    def causes = currentBuild.rawBuild.getCauses()
                    failureStage = currentBuild.rawBuild.getLog(50).join("\n").split("\n").findAll { it.contains("FAILED") }.take(3).join("\n")
                    if (!failureStage) {
                        failureStage = "Check console output for details"
                    }
                } catch (Exception e) {
                    failureStage = "Check console output for details"
                }
                
                discordSend(
                    webhookURL: DISCORD_WEBHOOK,
                    title: "❌ Build Failed!",
                    description: """**Branch:** `${env.GIT_BRANCH ?: 'origin/main'}`
**Build:** `${env.BUILD_NUMBER}`
**Status:** `❌ Failed`
**Environment:** `${params.DEPLOY_ENV}`

**📝 Last Commit:**
`${env.GIT_COMMIT_SHORT}` ${env.GIT_MESSAGE} - ${env.GIT_AUTHOR}

**💥 Failure Info:**
```
${failureStage}
```

**🔗 Links:**
• [View Build](${env.BUILD_URL})
• [Console Output](${env.BUILD_URL}console)
• [Pipeline](${env.BUILD_URL}pipeline-graph/)

**⏱️ Duration:** `${currentBuild.durationString}`""",
                    link: env.BUILD_URL,
                    result: 'FAILURE'
                )
            }
        }
        always {
            echo "Pipeline completed"
        }
    }
}