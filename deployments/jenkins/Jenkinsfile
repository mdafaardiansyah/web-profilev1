pipeline {
    agent any

    tools {
        nodejs 'NodeJS 18'
    }

    parameters {
        string(name: 'RELEASE_TAG', defaultValue: '', description: 'Release tag to build and deploy (kosongkan untuk menggunakan build number)')
        choice(name: 'DEPLOY_ENV', choices: ['development', 'production'], description: 'Environment to deploy')
    }

    environment {
        // Docker Hub Credentials
        DOCKER_HUB_CREDS = credentials('docker-hub')
        DOCKER_HUB_PAT = credentials('docker-hub-pat')
        
        // SonarQube Credentials
        SONARQUBE_TOKEN = credentials('sonarqube-token')
        SONARQUBE_URL = credentials('sonarqube-url')
        
        // Notification
        DISCORD_WEBHOOK = credentials('discord-notification')
        
        // Deployment
        IP_SERVER = credentials('ip-server-kvm2')
        USER_IP = credentials('user-ip-kvm2')
        
        // Application
        APP_NAME = 'portfolio'
        DOCKER_IMAGE = "ardidafa/${APP_NAME}"
        IMAGE_TAG = "${params.RELEASE_TAG ? params.RELEASE_TAG : env.BUILD_NUMBER}"
        
        // Security
        TRIVY_CACHE_DIR = '/tmp/trivy-cache'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    discordSend(
                        webhookURL: DISCORD_WEBHOOK,
                        title: "BUILD STARTED: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                        description: "Build started for ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                        link: env.BUILD_URL,
                        result: 'STARTED'
                    )
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh 'npm ci'
            }
        }
        
        stage('Code Quality Analysis') {
            steps {
                script {
                    def scannerHome = tool 'SonarQube-Scanner'
                    withSonarQubeEnv('SonarQube-Server') {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=portfolio-website \
                            -Dsonar.projectName="Portfolio Website" \
                            -Dsonar.projectVersion=1.0 \
                            -Dsonar.sources=src \
                            -Dsonar.exclusions=**/node_modules/**,**/build/**,**/*.test.js,**/*.spec.js,**/coverage/**,**/public/** \
                            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
                            -Dsonar.host.url=${SONARQUBE_URL} \
                            -Dsonar.login=${SONARQUBE_TOKEN}
                        """
                    }
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage('Security Scan - Dependencies') {
            steps {
                sh 'npm audit --production || true'
            }
        }
        
        stage('Build') {
            steps {
                sh 'CI=false npm run build'
            }
        }
        
        stage('Docker Build') {
            steps {
                // Perhatikan path Dockerfile yang sudah diubah
                sh "docker build -t ${DOCKER_IMAGE}:${IMAGE_TAG} -t ${DOCKER_IMAGE}:latest -f deployments/docker/Dockerfile ."
            }
        }
        
        stage('Security Scan - Container') {
            steps {
                script {
                    // Install Trivy if not exists
                    sh '''
                        if ! command -v trivy &> /dev/null; then
                            echo "Installing Trivy..."
                            wget -qO- https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
                            echo "deb https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
                            sudo apt-get update
                            sudo apt-get install trivy -y
                        fi
                    '''
                    
                    // Create cache directory
                    sh "mkdir -p ${TRIVY_CACHE_DIR}"
                    
                    // Run Trivy scan
                    sh """
                        trivy image \
                            --cache-dir ${TRIVY_CACHE_DIR} \
                            --format json \
                            --output trivy-report.json \
                            --severity HIGH,CRITICAL \
                            --exit-code 1 \
                            ${DOCKER_IMAGE}:${IMAGE_TAG}
                    """
                    
                    // Archive the report
                    archiveArtifacts artifacts: 'trivy-report.json', allowEmptyArchive: true
                }
            }
            post {
                always {
                    // Clean up cache if needed
                    sh "rm -rf ${TRIVY_CACHE_DIR} || true"
                }
            }
        }
        
        stage('Docker Push') {
            steps {
                sh "echo ${DOCKER_HUB_PAT} | docker login -u ardidafa --password-stdin"
                sh "docker push ${DOCKER_IMAGE}:${IMAGE_TAG}"
                sh "docker push ${DOCKER_IMAGE}:latest"
            }
        }
        
        stage('Deploy') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'deploy-server', keyFileVariable: 'SSH_KEY')]) {
                    withEnv([
                        "SERVER_IP=${IP_SERVER}", 
                        "SERVER_USER=${USER_IP}",
                        "DOCKER_IMG=${DOCKER_IMAGE}",
                        "IMG_TAG=${IMAGE_TAG}"
                    ]) {
                        sh '''
                            # Set correct SSH key permissions
                            chmod 600 "$SSH_KEY"
                            
                            # Create directory on server
                            ssh -o StrictHostKeyChecking=no -i "$SSH_KEY" $SERVER_USER@$SERVER_IP "mkdir -p /var/www/portfolio"
                            
                            # Clone or update repository
                            ssh -o StrictHostKeyChecking=no -i "$SSH_KEY" $SERVER_USER@$SERVER_IP "if [ -d /var/www/portfolio/.git ]; then \
                              cd /var/www/portfolio && git pull; \
                            else \
                              git clone https://github.com/mdafaardiansyah/web-profilev1.git /var/www/portfolio; \
                            fi"
                            
                            # Copy configuration files
                            scp -o StrictHostKeyChecking=no -i "$SSH_KEY" deployments/nginx/site.conf $SERVER_USER@$SERVER_IP:/var/www/portfolio/nginx-site.conf
                            
                            # Deploy application with correct nginx configuration
                            ssh -o StrictHostKeyChecking=no -i "$SSH_KEY" $SERVER_USER@$SERVER_IP "cd /var/www/portfolio && \
                            docker compose down && \
                            docker pull $DOCKER_IMG:$IMG_TAG && \
                            docker tag $DOCKER_IMG:$IMG_TAG $DOCKER_IMG:latest && \
                            docker compose up -d && \

                            # nginx reverse proxy conf
                            sudo cp nginx-site.conf /etc/nginx/sites-available/portfolio.glanze.site.conf && \
                            sudo ln -sf /etc/nginx/sites-available/portfolio.glanze.site.conf /etc/nginx/sites-enabled/ && \
                            sudo nginx -t && \
                            sudo systemctl reload nginx"
                        '''
                    }
                }
            }
        }
        
        stage('Smoke Test') {
            steps {
                // Wait for service to be ready
                sh 'sleep 30'

                // Basic health check
                sh 'curl -k -f -s --retry 10 --retry-connrefused --retry-delay 5 https://portfolio.glanze.site || true'
            }
        }
    }
    
    post {
        success {
            discordSend(
                webhookURL: DISCORD_WEBHOOK,
                title: "BUILD SUCCESSFUL: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                description: "Build completed successfully for ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                link: env.BUILD_URL,
                result: 'SUCCESS'
            )
        }
        failure {
            discordSend(
                webhookURL: DISCORD_WEBHOOK,
                title: "BUILD FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                description: "Build failed for ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                link: env.BUILD_URL,
                result: 'FAILURE'
            )
        }
        always {
            // Clean up Docker images and builder cache
            withEnv([
                "DOCKER_IMG=${DOCKER_IMAGE}", 
                "IMG_TAG=${IMAGE_TAG}"
            ]) {
                sh '''
                    # Hapus image yang tidak terpakai
                    docker rmi $DOCKER_IMG:$IMG_TAG || true
                    docker rmi $DOCKER_IMG:latest || true
                    
                    # Bersihkan builder cache untuk mencegah penumpukan storage
                    docker builder prune -f || true
                '''
            }
        }
    }
}